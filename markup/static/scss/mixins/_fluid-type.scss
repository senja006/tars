// changing properties when window resize

@mixin fluid-type($properties, $breakpoints-fluid-type, $values, $important: '') {
    & {

        @each $property in $properties {
            $default-value: nth($values, 1);
            @if length($default-value) > 1 {
                #{$property}: nth($default-value, 1) #{$important};
            } @else {
                #{$property}: $default-value #{$important};
            }

            @each $breakpoint-fliud-type in $breakpoints-fluid-type {
                $i: index($breakpoints-fluid-type, $breakpoint-fliud-type);
                $min-value: nth($values, $i);
                @if length($min-value) > 1 {
                    $min-value: nth($min-value, 2);
                }
                $min-vw: $breakpoint-fliud-type;

                @if type-of($min-vw) == 'string' {
                    $min-vw: map-get($breakpoints, $min-vw);
                }

                @if length($breakpoints-fluid-type) == $i {
                    @include breakpoint($breakpoint-fliud-type) {
                        #{$property}: $min-value #{$important};
                    }
                } @else {
                    $max-value: nth($values, $i+1);
                    @if length($max-value) > 1 {
                        $max-value: nth($max-value, 1);
                    }
                    $max-vw: nth($breakpoints-fluid-type, $i+1);

                    @if type-of($max-vw) == 'string' {
                        $max-vw: map-get($breakpoints, $max-vw);
                    }

                    @include breakpoint($breakpoint-fliud-type) {
                        #{$property}: $min-value #{$important};
                        #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})) #{$important};
                    }
                }
            }
        }
    }
}

@mixin fluid-type-steps($properties, $breakpoints-fluid-type, $values, $num-steps, $important: '') {
    $breakpoint-width: round((nth($breakpoints-fluid-type, 2) - nth($breakpoints-fluid-type, 1)) / $num-steps);
    $default-value: nth($values, 1);
    $value-width: 0;

    @if length($default-value) > 1 {
        $value-width: round((nth($values, 2) - nth($default-value, 2)) / $num-steps);
    } @else {
        $value-width: round((nth($values, 2) - nth($values, 1)) / $num-steps);
    }

    @each $property in $properties {
        $default-value: nth($values, 1);
        @if length($default-value) > 1 {
            #{$property}: nth($default-value, 1) #{$important};
        } @else {
            #{$property}: $default-value #{$important};
        }

        @for $i from 1 through $num-steps {
            $current-breakpoint: nth($breakpoints-fluid-type, 1) + $breakpoint-width * $i;
            $current-value: nth($values, 1) + $value-width * $i;

            @if $current-breakpoint > nth($breakpoints-fluid-type, 2) {
                $current-breakpoint: nth($breakpoints-fluid-type, 2);
            }

            @if $current-value > nth($values, 2) {
                $current-value: nth($values, 2);
            }

            @include breakpoint($current-breakpoint) {
                #{$property}: #{$current-value};
            }
        }
    }
}

@mixin original-fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
    & {
        @each $property in $properties {
            #{$property}: $min-value;
        }

        @media screen and (min-width: $min-vw) {
            @each $property in $properties {
                #{$property}: calc(#{$min-value} + #{strip-unit($max-value - $min-value)} * ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)}));
            }
        }

        @media screen and (min-width: $max-vw) {
            @each $property in $properties {
                #{$property}: $max-value;
            }
        }
    }
}

//@function strip-unit($value) {
//    @return $value / ($value * 0 + 1);
//}

// example

//@include fluid-type(font-size margin-bottom, 320px medium large, 14px 30px 60px);
//@include fluid-type(font-size margin-bottom, 320px medium large, (0px 14px) 30px (60px 100px));

/* Single property */
/*
html {
  @include original-fluid-type(font-size, 320px, 1366px, 14px, 18px);
}
*/

/* Multiple properties with same values */
/*
h1 {
  @include original-fluid-type(padding-bottom padding-top, 20em, 70em, 2em, 4em);
}
*/
